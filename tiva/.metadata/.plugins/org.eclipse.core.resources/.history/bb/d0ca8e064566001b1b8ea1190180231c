/** Generated by YAKINDU Statechart Tools code generator. */


#include "..\src\sc_types.h"

#include "indM.h"
#include "indM_required.h"
//#include "../inc/bsp.h"

/*! \file Implementation of the state machine 'indM'
*/

#ifndef SC_UNUSED
#define SC_UNUSED(P) (void)(P)
#endif

/* prototypes of all internal functions */
static sc_boolean check_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr1_tr1(IndM* handle);
static sc_boolean check_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr0_tr0(IndM* handle);
static sc_boolean check_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr0_tr0(IndM* handle);
static void effect_R_Main_s_Time_Gain_Setting_tr0(IndM* handle);
static void effect_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr1(IndM* handle);
static void effect_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr0(IndM* handle);
static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr0(IndM* handle);
static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr1(IndM* handle);
static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr0(IndM* handle);
static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr1(IndM* handle);
static void enact_R_Main_s_Port_Configuration(IndM* handle);
static void enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(IndM* handle);
static void enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(IndM* handle);
static void enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(IndM* handle);
static void enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(IndM* handle);
static void enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(IndM* handle);
static void enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(IndM* handle);
static void enact_R_Main_s_Ind_Measurement(IndM* handle);
static void enact_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(IndM* handle);
static void enact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(IndM* handle);
static void enact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(IndM* handle);
static void enact_R_Handler_s_Rl_Measurement_Handler(IndM* handle);
static void enact_R_Handler_s_Ind_Measurement_Handler(IndM* handle);
static void exact_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(IndM* handle);
static void exact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(IndM* handle);
static void exact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(IndM* handle);
static void exact_R_Handler_s_Rl_Measurement_Handler(IndM* handle);
static void exact_R_Handler_s_Ind_Measurement_Handler(IndM* handle);
static void enseq_R_Main_s_Port_Configuration_default(IndM* handle);
static void enseq_R_Main_s_Rl_Measurement_Default(IndM* handle);
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_default(IndM* handle);
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization_default(IndM* handle);
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation_default(IndM* handle);
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close_default(IndM* handle);
static void enseq_R_Main_s_Time_Gain_Setting_Time_Start(IndM* handle);
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_default(IndM* handle);
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close_default(IndM* handle);
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close_default(IndM* handle);
static void enseq_R_Main_s_Ind_Measurement_default(IndM* handle);
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User_default(IndM* handle);
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_default(IndM* handle);
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing_default(IndM* handle);
static void enseq_R_Handler_s_Null_Handler_default(IndM* handle);
static void enseq_R_Handler_s_Time_Gain_Set_Handler_default(IndM* handle);
static void enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_default(IndM* handle);
static void enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time_default(IndM* handle);
static void enseq_R_Handler_s_Rl_Measurement_Handler_default(IndM* handle);
static void enseq_R_Handler_s_Ind_Measurement_Handler_default(IndM* handle);
static void enseq_R_Main_default(IndM* handle);
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_Default(IndM* handle);
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Time_Start(IndM* handle);
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_default(IndM* handle);
static void enseq_R_Handler_default(IndM* handle);
static void enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_default(IndM* handle);
static void exseq_R_Main_s_Port_Configuration(IndM* handle);
static void exseq_R_Main_s_Rl_Measurement(IndM* handle);
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait(IndM* handle);
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(IndM* handle);
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(IndM* handle);
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(IndM* handle);
static void exseq_R_Main_s_Time_Gain_Setting(IndM* handle);
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(IndM* handle);
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(IndM* handle);
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(IndM* handle);
static void exseq_R_Main_s_Ind_Measurement(IndM* handle);
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User(IndM* handle);
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data(IndM* handle);
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(IndM* handle);
static void exseq_R_Handler_s_Null_Handler(IndM* handle);
static void exseq_R_Handler_s_Time_Gain_Set_Handler(IndM* handle);
static void exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(IndM* handle);
static void exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(IndM* handle);
static void exseq_R_Handler_s_Rl_Measurement_Handler(IndM* handle);
static void exseq_R_Handler_s_Ind_Measurement_Handler(IndM* handle);
static void exseq_R_Main(IndM* handle);
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med(IndM* handle);
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set(IndM* handle);
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement(IndM* handle);
static void exseq_R_Handler(IndM* handle);
static void exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler(IndM* handle);
static void react_R_Main_s_Rl_Measurement_R_Res_Med__choice_0(IndM* handle);
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0(IndM* handle);
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1(IndM* handle);
static void react_R_Main__entry_Default(IndM* handle);
static void react_R_Main_s_Rl_Measurement_R_Res_Med_Default(IndM* handle);
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Time_Start(IndM* handle);
static void react_R_Main_s_Ind_Measurement_R_Main_Measurement__entry_Default(IndM* handle);
static void react_R_Handler__entry_Default(IndM* handle);
static void react_R_Handler_s_Time_Gain_Set_Handler_r_handler__entry_Default(IndM* handle);
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Close(IndM* handle);

/*! State machine reactions. */
static sc_boolean react(IndM* handle);

/*! The reactions of state s_Port_Configuration. */
static sc_boolean R_Main_s_Port_Configuration_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Rl_Measurement. */
static sc_boolean R_Main_s_Rl_Measurement_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Wait. */
static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Initilization. */
static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Control_and_RCalculation. */
static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Close. */
static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Close_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Time_Gain_Setting. */
static sc_boolean R_Main_s_Time_Gain_Setting_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Setting. */
static sc_boolean R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Safe_Close. */
static sc_boolean R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Normal_Close. */
static sc_boolean R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Ind_Measurement. */
static sc_boolean R_Main_s_Ind_Measurement_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Wait_User. */
static sc_boolean R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Wait_New_data. */
static sc_boolean R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Data_Processing. */
static sc_boolean R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Null_Handler. */
static sc_boolean R_Handler_s_Null_Handler_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Time_Gain_Set_Handler. */
static sc_boolean R_Handler_s_Time_Gain_Set_Handler_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_waiting. */
static sc_boolean R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_end_time. */
static sc_boolean R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Rl_Measurement_Handler. */
static sc_boolean R_Handler_s_Rl_Measurement_Handler_react(IndM* handle, const sc_boolean try_transition);

/*! The reactions of state s_Ind_Measurement_Handler. */
static sc_boolean R_Handler_s_Ind_Measurement_Handler_react(IndM* handle, const sc_boolean try_transition);


static void swapInEvents(IndM* handle);

static void clearInEvents(IndM* handle);

static void swapInternalEvents(IndM* handle);

static void clearInternalEvents(IndM* handle);



const sc_integer INDM_INDMINTERNAL_MAX_RUNS = 500000;

//const sc_integer INDM_INDMINTERNAL_PERIOD_SYSTICK_RES = 20;
const sc_integer INDM_INDMINTERNAL_PERIOD_SYSTICK_RES = 20000;
//const sc_integer INDM_INDMINTERNAL_SAMPLING_PERIOD = 20;
const sc_integer INDM_INDMINTERNAL_SAMPLING_PERIOD = 20000;
//const sc_integer INDM_INDMINTERNAL_PERIOD_SYSTICK_MAIN = 200000;
const sc_integer INDM_INDMINTERNAL_PERIOD_SYSTICK_MAIN = 200000000;
//const sc_integer INDM_INDMINTERNAL_PERIOD_SYSTICK_SET = 100000;
const sc_integer INDM_INDMINTERNAL_PERIOD_SYSTICK_SET = 100000000;

void indM_init(IndM* handle)
{
	sc_integer i;
	
	for (i = 0; i < INDM_MAX_ORTHOGONAL_STATES; ++i)
	{
		handle->stateConfVector[i] = IndM_last_state;
	}
	
	
	handle->stateConfVectorPosition = 0;
	
	clearInEvents(handle);
	clearInternalEvents(handle);
	swapInEvents(handle);
	swapInternalEvents(handle);
	
	
	/* Default init sequence for statechart indM */
	handle->iface.Conf_Ready = bool_false;
	handle->iface.sp_Vref = 0;
	handle->iface.sp_v_gate = 0;
	handle->iface.sp_data = 0;
	handle->iface.sp_R = 0;
	handle->iface.sp_bf_i_Y = 0;
	handle->iface.sp_bf_Y = 0;
	handle->iface.runs = 0;
	handle->iface.f_res_configured = bool_false;
	handle->iface.n_i = 0;
	handle->iface.n_f = 0;
	handle->iface.N_samples = 0;
	handle->iface.f_ireach = bool_false;
	handle->iface.WrongSetting = bool_false;
	handle->iface.Gain_set = bool_false;
	handle->iface.Full_buffer = bool_false;
	
	handle->isExecuting = bool_false;
}

void indM_enter(IndM* handle)
{
	/* Activates the state machine. */
	if (handle->isExecuting == bool_true)
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
	/* Default enter sequence for statechart indM */
	enseq_R_Main_default(handle);
	enseq_R_Handler_default(handle);
	handle->isExecuting = bool_false;
}

void indM_exit(IndM* handle)
{
	/* Deactivates the state machine. */
	if (handle->isExecuting == bool_true)
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
	/* Default exit sequence for statechart indM */
	exseq_R_Main(handle);
	exseq_R_Handler(handle);
	handle->isExecuting = bool_false;
}

void indM_run_cycle(IndM* handle)
{
	/* Performs a 'run to completion' step. */
	if (handle->isExecuting == bool_true)
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
	swapInEvents(handle);
	do
	{ 
		for (handle->stateConfVectorPosition = 0;
			handle->stateConfVectorPosition < INDM_MAX_ORTHOGONAL_STATES;
			handle->stateConfVectorPosition++)
			{
				
			switch (handle->stateConfVector[handle->stateConfVectorPosition])
			{
			case IndM_R_Main_s_Port_Configuration:
			{
				R_Main_s_Port_Configuration_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait:
			{
				R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization:
			{
				R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation:
			{
				R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close:
			{
				R_Main_s_Rl_Measurement_R_Res_Med_s_Close_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting:
			{
				R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close:
			{
				R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close:
			{
				R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User:
			{
				R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data:
			{
				R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_react(handle, bool_true);
				break;
			}
			case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing:
			{
				R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing_react(handle, bool_true);
				break;
			}
			case IndM_R_Handler_s_Null_Handler:
			{
				R_Handler_s_Null_Handler_react(handle, bool_true);
				break;
			}
			case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting:
			{
				R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_react(handle, bool_true);
				break;
			}
			case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time:
			{
				R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time_react(handle, bool_true);
				break;
			}
			case IndM_R_Handler_s_Rl_Measurement_Handler:
			{
				R_Handler_s_Rl_Measurement_Handler_react(handle, bool_true);
				break;
			}
			case IndM_R_Handler_s_Ind_Measurement_Handler:
			{
				R_Handler_s_Ind_Measurement_Handler_react(handle, bool_true);
				break;
			}
			default:
				break;
			}
		}
		swapInternalEvents(handle);
	} while (handle->current.internal.New_data_raised == bool_true);
	handle->isExecuting = bool_false;
}


sc_boolean indM_is_active(const IndM* handle)
{
	sc_boolean result = bool_false;
	sc_integer i;
	
	for(i = 0; i < INDM_MAX_ORTHOGONAL_STATES; i++)
	{
		result = result || handle->stateConfVector[i] != IndM_last_state;
	}
	
	return result;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean indM_is_final(const IndM* handle)
{
	SC_UNUSED(handle);
	return bool_false;
}

void indM_raise_time_event(IndM* handle, sc_eventid evid)
{
	if ( ((sc_intptr_t)evid) >= ((sc_intptr_t)&(handle->timeEvents))
		&&  ((sc_intptr_t)evid) < ((sc_intptr_t)&(handle->timeEvents)) + (unsigned)sizeof(IndMTimeEvents))
		{
		*(sc_boolean*)evid = bool_true;
	}
}

sc_boolean indM_is_state_active(const IndM* handle, IndMStates state)
{
	sc_boolean result = bool_false;
	switch (state)
	{
		case IndM_R_Main_s_Port_Configuration :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_PORT_CONFIGURATION] == IndM_R_Main_s_Port_Configuration
			);
			break;
		case IndM_R_Main_s_Rl_Measurement :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_RL_MEASUREMENT] >= IndM_R_Main_s_Rl_Measurement
				&& handle->stateConfVector[SCVI_INDM_R_MAIN_S_RL_MEASUREMENT] <= IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close);
			break;
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_RL_MEASUREMENT_R_RES_MED_S_WAIT] == IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait
			);
			break;
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_RL_MEASUREMENT_R_RES_MED_S_INITILIZATION] == IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization
			);
			break;
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_RL_MEASUREMENT_R_RES_MED_S_CONTROL_AND_RCALCULATION] == IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation
			);
			break;
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_RL_MEASUREMENT_R_RES_MED_S_CLOSE] == IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close
			);
			break;
		case IndM_R_Main_s_Time_Gain_Setting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_TIME_GAIN_SETTING] >= IndM_R_Main_s_Time_Gain_Setting
				&& handle->stateConfVector[SCVI_INDM_R_MAIN_S_TIME_GAIN_SETTING] <= IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close);
			break;
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_TIME_GAIN_SETTING_R_TIME_GAIN_SET_S_SETTING] == IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting
			);
			break;
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_TIME_GAIN_SETTING_R_TIME_GAIN_SET_S_SAFE_CLOSE] == IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close
			);
			break;
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_TIME_GAIN_SETTING_R_TIME_GAIN_SET_S_NORMAL_CLOSE] == IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close
			);
			break;
		case IndM_R_Main_s_Ind_Measurement :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_IND_MEASUREMENT] >= IndM_R_Main_s_Ind_Measurement
				&& handle->stateConfVector[SCVI_INDM_R_MAIN_S_IND_MEASUREMENT] <= IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing);
			break;
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_IND_MEASUREMENT_R_MAIN_MEASUREMENT_S_WAIT_USER] == IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User
			);
			break;
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_IND_MEASUREMENT_R_MAIN_MEASUREMENT_S_WAIT_NEW_DATA] == IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data
			);
			break;
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_MAIN_S_IND_MEASUREMENT_R_MAIN_MEASUREMENT_S_DATA_PROCESSING] == IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing
			);
			break;
		case IndM_R_Handler_s_Null_Handler :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_HANDLER_S_NULL_HANDLER] == IndM_R_Handler_s_Null_Handler
			);
			break;
		case IndM_R_Handler_s_Time_Gain_Set_Handler :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_HANDLER_S_TIME_GAIN_SET_HANDLER] >= IndM_R_Handler_s_Time_Gain_Set_Handler
				&& handle->stateConfVector[SCVI_INDM_R_HANDLER_S_TIME_GAIN_SET_HANDLER] <= IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time);
			break;
		case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_HANDLER_S_TIME_GAIN_SET_HANDLER_R_HANDLER_S_WAITING] == IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting
			);
			break;
		case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_HANDLER_S_TIME_GAIN_SET_HANDLER_R_HANDLER_S_END_TIME] == IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time
			);
			break;
		case IndM_R_Handler_s_Rl_Measurement_Handler :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_HANDLER_S_RL_MEASUREMENT_HANDLER] == IndM_R_Handler_s_Rl_Measurement_Handler
			);
			break;
		case IndM_R_Handler_s_Ind_Measurement_Handler :
			result = (sc_boolean) (handle->stateConfVector[SCVI_INDM_R_HANDLER_S_IND_MEASUREMENT_HANDLER] == IndM_R_Handler_s_Ind_Measurement_Handler
			);
			break;
		default:
			result = bool_false;
			break;
	}
	return result;
}

static void swapInEvents(IndM* handle)
{
	handle->current.iface.Play_raised = handle->iface.Play_raised;
	handle->iface.Play_raised = bool_false;
	handle->current.iface.Stop_raised = handle->iface.Stop_raised;
	handle->iface.Stop_raised = bool_false;
	handle->current.timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_time_event_0_raised = handle->timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_tev0_raised;
	handle->timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_tev0_raised = bool_false;
	handle->current.timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_time_event_0_raised = handle->timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_tev0_raised;
	handle->timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_tev0_raised = bool_false;
	handle->current.timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_time_event_0_raised = handle->timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_tev0_raised;
	handle->timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_tev0_raised = bool_false;
	handle->current.timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_time_event_0_raised = handle->timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_tev0_raised;
	handle->timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_tev0_raised = bool_false;
}

static void clearInEvents(IndM* handle)
{
	handle->iface.Play_raised = bool_false;
	handle->iface.Stop_raised = bool_false;
	handle->timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_tev0_raised = bool_false;
	handle->timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_tev0_raised = bool_false;
	handle->timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_tev0_raised = bool_false;
	handle->timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_tev0_raised = bool_false;
}

static void swapInternalEvents(IndM* handle)
{
	/* When processing internal events all incoming events are processed and must be cleared from current buffer. */
	handle->current.iface.Play_raised = bool_false;
	handle->current.iface.Stop_raised = bool_false;
	handle->current.timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_time_event_0_raised = bool_false;
	handle->current.timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_time_event_0_raised = bool_false;
	handle->current.timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_time_event_0_raised = bool_false;
	handle->current.timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_time_event_0_raised = bool_false;
	/* Swap all internal events. */
	handle->current.internal.New_data_raised = handle->internal.New_data_raised;
	handle->internal.New_data_raised = bool_false;
}

static void clearInternalEvents(IndM* handle)
{
	handle->internal.New_data_raised = bool_false;
}


void indM_raise_play(IndM* handle)
{
	handle->iface.Play_raised = bool_true;
}

void indM_raise_stop(IndM* handle)
{
	handle->iface.Stop_raised = bool_true;
}



sc_boolean indM_get_conf_Ready(const IndM* handle)
{
	return handle->iface.Conf_Ready;
}
void indM_set_conf_Ready(IndM* handle, sc_boolean value)
{
	handle->iface.Conf_Ready = value;
}
sc_real* indM_get_sp_Vref(const IndM* handle)
{
	return handle->iface.sp_Vref;
}
void indM_set_sp_Vref(IndM* handle, sc_real* value)
{
	handle->iface.sp_Vref = value;
}
sc_real* indM_get_sp_v_gate(const IndM* handle)
{
	return handle->iface.sp_v_gate;
}
void indM_set_sp_v_gate(IndM* handle, sc_real* value)
{
	handle->iface.sp_v_gate = value;
}
sc_integer* indM_get_sp_data(const IndM* handle)
{
	return handle->iface.sp_data;
}
void indM_set_sp_data(IndM* handle, sc_integer* value)
{
	handle->iface.sp_data = value;
}
sc_real* indM_get_sp_R(const IndM* handle)
{
	return handle->iface.sp_R;
}
void indM_set_sp_R(IndM* handle, sc_real* value)
{
	handle->iface.sp_R = value;
}
// Added
sc_string indM_get_sp_bf_Y(const IndM* handle)
{
    return handle->iface.sp_bf_Y;
}
void indM_set_sp_bf_Y(IndM* handle, sc_string value)
{
    handle->iface.sp_bf_Y = value;
}
sc_string indM_get_sp_bf_i_Y(const IndM* handle)
{
    return handle->iface.sp_bf_i_Y;
}
void indM_set_sp_bf_i_Y(IndM* handle, sc_string value)
{
    handle->iface.sp_bf_i_Y = value;
}
//End of added
sc_integer indM_get_runs(const IndM* handle)
{
	return handle->iface.runs;
}
void indM_set_runs(IndM* handle, sc_integer value)
{
	handle->iface.runs = value;
}
sc_boolean indM_get_f_res_configured(const IndM* handle)
{
	return handle->iface.f_res_configured;
}
void indM_set_f_res_configured(IndM* handle, sc_boolean value)
{
	handle->iface.f_res_configured = value;
}
sc_integer indM_get_n_i(const IndM* handle)
{
	return handle->iface.n_i;
}
void indM_set_n_i(IndM* handle, sc_integer value)
{
	handle->iface.n_i = value;
}
sc_integer indM_get_n_f(const IndM* handle)
{
	return handle->iface.n_f;
}
void indM_set_n_f(IndM* handle, sc_integer value)
{
	handle->iface.n_f = value;
}
sc_integer indM_get_n_samples(const IndM* handle)
{
	return handle->iface.N_samples;
}
void indM_set_n_samples(IndM* handle, sc_integer value)
{
	handle->iface.N_samples = value;
}
sc_boolean indM_get_f_ireach(const IndM* handle)
{
	return handle->iface.f_ireach;
}
void indM_set_f_ireach(IndM* handle, sc_boolean value)
{
	handle->iface.f_ireach = value;
}
sc_boolean indM_get_wrongSetting(const IndM* handle)
{
	return handle->iface.WrongSetting;
}
void indM_set_wrongSetting(IndM* handle, sc_boolean value)
{
	handle->iface.WrongSetting = value;
}
sc_boolean indM_get_gain_set(const IndM* handle)
{
	return handle->iface.Gain_set;
}
void indM_set_gain_set(IndM* handle, sc_boolean value)
{
	handle->iface.Gain_set = value;
}
sc_boolean indM_get_full_buffer(const IndM* handle)
{
	return handle->iface.Full_buffer;
}
void indM_set_full_buffer(IndM* handle, sc_boolean value)
{
	handle->iface.Full_buffer = value;
}

/* implementations of all internal functions */

static sc_boolean check_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr1_tr1(IndM* handle)
{
	return (handle->iface.runs) >= (INDM_INDMINTERNAL_MAX_RUNS);
}

static sc_boolean check_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr0_tr0(IndM* handle)
{
	return (handle->iface.WrongSetting) == (bool_true);
}

static sc_boolean check_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr0_tr0(IndM* handle)
{
	return ((handle->iface.Gain_set) == (bool_true)) && ((handle->iface.f_ireach) == (bool_true));
}

static void effect_R_Main_s_Time_Gain_Setting_tr0(IndM* handle)
{
	exseq_R_Main_s_Time_Gain_Setting(handle);
	enseq_R_Main_s_Ind_Measurement_default(handle);
}

static void effect_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr1(IndM* handle)
{
	enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close_default(handle);
}

static void effect_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr0(IndM* handle)
{
	enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_default(handle);
}

static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr0(IndM* handle)
{
	enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close_default(handle);
}

static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr1(IndM* handle)
{
	react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1(handle);
}

static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr0(IndM* handle)
{
	enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close_default(handle);
}

static void effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr1(IndM* handle)
{
	enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_default(handle);
}

/* Entry action for state 's_Port_Configuration'. */
static void enact_R_Main_s_Port_Configuration(IndM* handle)
{
	/* Entry action for state 's_Port_Configuration'. */
	handle->iface.Conf_Ready = indM_port_configuration(handle);
}

/* Entry action for state 's_Initilization'. */
static void enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(IndM* handle)
{
	/* Entry action for state 's_Initilization'. */
	handle->iface.Conf_Ready = bool_false;
	handle->iface.f_res_configured = indM_res_Init(handle, handle->iface.sp_Vref, handle->iface.sp_v_gate, handle->iface.sp_data);
}

/* Entry action for state 's_Control_and_RCalculation'. */
static void enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(IndM* handle)
{
	/* Entry action for state 's_Control_and_RCalculation'. */
	indM_control_and_RCalculation(handle, handle->iface.sp_Vref, handle->iface.sp_v_gate, handle->iface.sp_data, handle->iface.sp_R);
}

/* Entry action for state 's_Close'. */
static void enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(IndM* handle)
{
	/* Entry action for state 's_Close'. */
	handle->iface.Conf_Ready = indM_res_Closing(handle, handle->iface.sp_v_gate);
}

/* Entry action for state 's_Setting'. */
static void enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(IndM* handle)
{
	/* Entry action for state 's_Setting'. */
	indM_set_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_tev0_raised) , (INDM_INDMINTERNAL_SAMPLING_PERIOD / 1000), bool_false);
	handle->iface.Conf_Ready = bool_false;
	indM_setting(handle, handle->iface.Gain_set, handle->iface.f_ireach, handle->iface.WrongSetting);
}

/* Entry action for state 's_Safe_Close'. */
static void enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(IndM* handle)
{
	/* Entry action for state 's_Safe_Close'. */
	handle->iface.Conf_Ready = indM_safe_Close(handle);
}

/* Entry action for state 's_Normal_Close'. */
static void enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(IndM* handle)
{
	/* Entry action for state 's_Normal_Close'. */
	handle->iface.Conf_Ready = indM_normal_Close(handle, handle->iface.n_i, handle->iface.n_f);
}

/* Entry action for state 's_Ind_Measurement'. */
static void enact_R_Main_s_Ind_Measurement(IndM* handle)
{
	/* Entry action for state 's_Ind_Measurement'. */
	handle->iface.Conf_Ready = bool_false;
}

/* Entry action for state 's_Data_Processing'. */
static void enact_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(IndM* handle)
{
	/* Entry action for state 's_Data_Processing'. */
	handle->iface.Full_buffer = bool_false;
	handle->iface.Full_buffer = indM_data_Processing(handle, handle->iface.sp_bf_Y, handle->iface.sp_bf_i_Y);
}

/* Entry action for state 's_waiting'. */
static void enact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(IndM* handle)
{
	/* Entry action for state 's_waiting'. */
	indM_set_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_tev0_raised) , (INDM_INDMINTERNAL_PERIOD_SYSTICK_SET / 1000), bool_false);
}

/* Entry action for state 's_end_time'. */
static void enact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(IndM* handle)
{
	/* Entry action for state 's_end_time'. */
	handle->iface.WrongSetting = bool_true;
}

/* Entry action for state 's_Rl_Measurement_Handler'. */
static void enact_R_Handler_s_Rl_Measurement_Handler(IndM* handle)
{
	/* Entry action for state 's_Rl_Measurement_Handler'. */
	indM_set_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_tev0_raised) , (INDM_INDMINTERNAL_PERIOD_SYSTICK_RES / 1000), bool_false);
	handle->internal.New_data_raised = bool_true;
}

/* Entry action for state 's_Ind_Measurement_Handler'. */
static void enact_R_Handler_s_Ind_Measurement_Handler(IndM* handle)
{
	/* Entry action for state 's_Ind_Measurement_Handler'. */
	indM_set_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_tev0_raised) , (INDM_INDMINTERNAL_PERIOD_SYSTICK_MAIN / 1000), bool_false);
	handle->internal.New_data_raised = bool_true;
}

/* Exit action for state 's_Control_and_RCalculation'. */
static void exact_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(IndM* handle)
{
	/* Exit action for state 's_Control_and_RCalculation'. */
	handle->iface.runs = (handle->iface.runs + 1);
}

/* Exit action for state 's_Setting'. */
static void exact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(IndM* handle)
{
	/* Exit action for state 's_Setting'. */
	indM_unset_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_tev0_raised) );		
}

/* Exit action for state 's_waiting'. */
static void exact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(IndM* handle)
{
	/* Exit action for state 's_waiting'. */
	indM_unset_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_tev0_raised) );		
}

/* Exit action for state 's_Rl_Measurement_Handler'. */
static void exact_R_Handler_s_Rl_Measurement_Handler(IndM* handle)
{
	/* Exit action for state 's_Rl_Measurement_Handler'. */
	indM_unset_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_tev0_raised) );		
}

/* Exit action for state 's_Ind_Measurement_Handler'. */
static void exact_R_Handler_s_Ind_Measurement_Handler(IndM* handle)
{
	/* Exit action for state 's_Ind_Measurement_Handler'. */
	indM_unset_timer(handle, (sc_eventid) &(handle->timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_tev0_raised) );		
}

/* 'default' enter sequence for state s_Port_Configuration */
static void enseq_R_Main_s_Port_Configuration_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Port_Configuration */
	enact_R_Main_s_Port_Configuration(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Port_Configuration;
	handle->stateConfVectorPosition = 0;
}

/* 'Default' enter sequence for state s_Rl_Measurement */
static void enseq_R_Main_s_Rl_Measurement_Default(IndM* handle)
{
	/* 'Default' enter sequence for state s_Rl_Measurement */
	enseq_R_Main_s_Rl_Measurement_R_Res_Med_Default(handle);
}

/* 'default' enter sequence for state s_Wait */
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Wait */
	handle->stateConfVector[0] = IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Initilization */
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Initilization */
	enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Control_and_RCalculation */
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Control_and_RCalculation */
	enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Close */
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Close */
	enact_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close;
	handle->stateConfVectorPosition = 0;
}

/* 'Time_Start' enter sequence for state s_Time_Gain_Setting */
static void enseq_R_Main_s_Time_Gain_Setting_Time_Start(IndM* handle)
{
	/* 'Time_Start' enter sequence for state s_Time_Gain_Setting */
	enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Time_Start(handle);
}

/* 'default' enter sequence for state s_Setting */
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Setting */
	enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Safe_Close */
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Safe_Close */
	enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Normal_Close */
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Normal_Close */
	enact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Ind_Measurement */
static void enseq_R_Main_s_Ind_Measurement_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Ind_Measurement */
	enact_R_Main_s_Ind_Measurement(handle);
	enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_default(handle);
}

/* 'default' enter sequence for state s_Wait_User */
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Wait_User */
	handle->stateConfVector[0] = IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Wait_New_data */
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Wait_New_data */
	handle->stateConfVector[0] = IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Data_Processing */
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Data_Processing */
	enact_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(handle);
	handle->stateConfVector[0] = IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing;
	handle->stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state s_Null_Handler */
static void enseq_R_Handler_s_Null_Handler_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Null_Handler */
	handle->stateConfVector[1] = IndM_R_Handler_s_Null_Handler;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state s_Time_Gain_Set_Handler */
static void enseq_R_Handler_s_Time_Gain_Set_Handler_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Time_Gain_Set_Handler */
	enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_default(handle);
}

/* 'default' enter sequence for state s_waiting */
static void enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_default(IndM* handle)
{
	/* 'default' enter sequence for state s_waiting */
	enact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(handle);
	handle->stateConfVector[1] = IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state s_end_time */
static void enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time_default(IndM* handle)
{
	/* 'default' enter sequence for state s_end_time */
	enact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(handle);
	handle->stateConfVector[1] = IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state s_Rl_Measurement_Handler */
static void enseq_R_Handler_s_Rl_Measurement_Handler_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Rl_Measurement_Handler */
	enact_R_Handler_s_Rl_Measurement_Handler(handle);
	handle->stateConfVector[1] = IndM_R_Handler_s_Rl_Measurement_Handler;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state s_Ind_Measurement_Handler */
static void enseq_R_Handler_s_Ind_Measurement_Handler_default(IndM* handle)
{
	/* 'default' enter sequence for state s_Ind_Measurement_Handler */
	enact_R_Handler_s_Ind_Measurement_Handler(handle);
	handle->stateConfVector[1] = IndM_R_Handler_s_Ind_Measurement_Handler;
	handle->stateConfVectorPosition = 1;
}

/* 'default' enter sequence for region R_Main */
static void enseq_R_Main_default(IndM* handle)
{
	/* 'default' enter sequence for region R_Main */
	react_R_Main__entry_Default(handle);
}

/* 'Default' enter sequence for region R_Res_Med */
static void enseq_R_Main_s_Rl_Measurement_R_Res_Med_Default(IndM* handle)
{
	/* 'Default' enter sequence for region R_Res_Med */
	react_R_Main_s_Rl_Measurement_R_Res_Med_Default(handle);
}

/* 'Time_Start' enter sequence for region R_Time_Gain_set */
static void enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Time_Start(IndM* handle)
{
	/* 'Time_Start' enter sequence for region R_Time_Gain_set */
	react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Time_Start(handle);
}

/* 'default' enter sequence for region R_Main_Measurement */
static void enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_default(IndM* handle)
{
	/* 'default' enter sequence for region R_Main_Measurement */
	react_R_Main_s_Ind_Measurement_R_Main_Measurement__entry_Default(handle);
}

/* 'default' enter sequence for region R_Handler */
static void enseq_R_Handler_default(IndM* handle)
{
	/* 'default' enter sequence for region R_Handler */
	react_R_Handler__entry_Default(handle);
}

/* 'default' enter sequence for region r_handler */
static void enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_default(IndM* handle)
{
	/* 'default' enter sequence for region r_handler */
	react_R_Handler_s_Time_Gain_Set_Handler_r_handler__entry_Default(handle);
}

/* Default exit sequence for state s_Port_Configuration */
static void exseq_R_Main_s_Port_Configuration(IndM* handle)
{
	/* Default exit sequence for state s_Port_Configuration */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Rl_Measurement */
static void exseq_R_Main_s_Rl_Measurement(IndM* handle)
{
	/* Default exit sequence for state s_Rl_Measurement */
	exseq_R_Main_s_Rl_Measurement_R_Res_Med(handle);
}

/* Default exit sequence for state s_Wait */
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait(IndM* handle)
{
	/* Default exit sequence for state s_Wait */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Initilization */
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(IndM* handle)
{
	/* Default exit sequence for state s_Initilization */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Control_and_RCalculation */
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(IndM* handle)
{
	/* Default exit sequence for state s_Control_and_RCalculation */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
	exact_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(handle);
}

/* Default exit sequence for state s_Close */
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(IndM* handle)
{
	/* Default exit sequence for state s_Close */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Time_Gain_Setting */
static void exseq_R_Main_s_Time_Gain_Setting(IndM* handle)
{
	/* Default exit sequence for state s_Time_Gain_Setting */
	exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set(handle);
}

/* Default exit sequence for state s_Setting */
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(IndM* handle)
{
	/* Default exit sequence for state s_Setting */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
	exact_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(handle);
}

/* Default exit sequence for state s_Safe_Close */
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(IndM* handle)
{
	/* Default exit sequence for state s_Safe_Close */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Normal_Close */
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(IndM* handle)
{
	/* Default exit sequence for state s_Normal_Close */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Ind_Measurement */
static void exseq_R_Main_s_Ind_Measurement(IndM* handle)
{
	/* Default exit sequence for state s_Ind_Measurement */
	exseq_R_Main_s_Ind_Measurement_R_Main_Measurement(handle);
}

/* Default exit sequence for state s_Wait_User */
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User(IndM* handle)
{
	/* Default exit sequence for state s_Wait_User */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Wait_New_data */
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data(IndM* handle)
{
	/* Default exit sequence for state s_Wait_New_data */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Data_Processing */
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(IndM* handle)
{
	/* Default exit sequence for state s_Data_Processing */
	handle->stateConfVector[0] = IndM_last_state;
	handle->stateConfVectorPosition = 0;
}

/* Default exit sequence for state s_Null_Handler */
static void exseq_R_Handler_s_Null_Handler(IndM* handle)
{
	/* Default exit sequence for state s_Null_Handler */
	handle->stateConfVector[1] = IndM_last_state;
	handle->stateConfVectorPosition = 1;
}

/* Default exit sequence for state s_Time_Gain_Set_Handler */
static void exseq_R_Handler_s_Time_Gain_Set_Handler(IndM* handle)
{
	/* Default exit sequence for state s_Time_Gain_Set_Handler */
	exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler(handle);
}

/* Default exit sequence for state s_waiting */
static void exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(IndM* handle)
{
	/* Default exit sequence for state s_waiting */
	handle->stateConfVector[1] = IndM_last_state;
	handle->stateConfVectorPosition = 1;
	exact_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(handle);
}

/* Default exit sequence for state s_end_time */
static void exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(IndM* handle)
{
	/* Default exit sequence for state s_end_time */
	handle->stateConfVector[1] = IndM_last_state;
	handle->stateConfVectorPosition = 1;
}

/* Default exit sequence for state s_Rl_Measurement_Handler */
static void exseq_R_Handler_s_Rl_Measurement_Handler(IndM* handle)
{
	/* Default exit sequence for state s_Rl_Measurement_Handler */
	handle->stateConfVector[1] = IndM_last_state;
	handle->stateConfVectorPosition = 1;
	exact_R_Handler_s_Rl_Measurement_Handler(handle);
}

/* Default exit sequence for state s_Ind_Measurement_Handler */
static void exseq_R_Handler_s_Ind_Measurement_Handler(IndM* handle)
{
	/* Default exit sequence for state s_Ind_Measurement_Handler */
	handle->stateConfVector[1] = IndM_last_state;
	handle->stateConfVectorPosition = 1;
	exact_R_Handler_s_Ind_Measurement_Handler(handle);
}

/* Default exit sequence for region R_Main */
static void exseq_R_Main(IndM* handle)
{
	/* Default exit sequence for region R_Main */
	/* Handle exit of all possible states (of indM.R_Main) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case IndM_R_Main_s_Port_Configuration :
		{
			exseq_R_Main_s_Port_Configuration(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(handle);
			break;
		}
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting :
		{
			exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(handle);
			break;
		}
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close :
		{
			exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(handle);
			break;
		}
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close :
		{
			exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(handle);
			break;
		}
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User :
		{
			exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User(handle);
			break;
		}
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data :
		{
			exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data(handle);
			break;
		}
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing :
		{
			exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region R_Res_Med */
static void exseq_R_Main_s_Rl_Measurement_R_Res_Med(IndM* handle)
{
	/* Default exit sequence for region R_Res_Med */
	/* Handle exit of all possible states (of indM.R_Main.s_Rl_Measurement.R_Res_Med) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(handle);
			break;
		}
		case IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Close :
		{
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region R_Time_Gain_set */
static void exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set(IndM* handle)
{
	/* Default exit sequence for region R_Time_Gain_set */
	/* Handle exit of all possible states (of indM.R_Main.s_Time_Gain_Setting.R_Time_Gain_set) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting :
		{
			exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(handle);
			break;
		}
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close :
		{
			exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(handle);
			break;
		}
		case IndM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close :
		{
			exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region R_Main_Measurement */
static void exseq_R_Main_s_Ind_Measurement_R_Main_Measurement(IndM* handle)
{
	/* Default exit sequence for region R_Main_Measurement */
	/* Handle exit of all possible states (of indM.R_Main.s_Ind_Measurement.R_Main_Measurement) at position 0... */
	switch(handle->stateConfVector[ 0 ])
	{
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User :
		{
			exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User(handle);
			break;
		}
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data :
		{
			exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data(handle);
			break;
		}
		case IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing :
		{
			exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region R_Handler */
static void exseq_R_Handler(IndM* handle)
{
	/* Default exit sequence for region R_Handler */
	/* Handle exit of all possible states (of indM.R_Handler) at position 1... */
	switch(handle->stateConfVector[ 1 ])
	{
		case IndM_R_Handler_s_Null_Handler :
		{
			exseq_R_Handler_s_Null_Handler(handle);
			break;
		}
		case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting :
		{
			exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(handle);
			break;
		}
		case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time :
		{
			exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(handle);
			break;
		}
		case IndM_R_Handler_s_Rl_Measurement_Handler :
		{
			exseq_R_Handler_s_Rl_Measurement_Handler(handle);
			break;
		}
		case IndM_R_Handler_s_Ind_Measurement_Handler :
		{
			exseq_R_Handler_s_Ind_Measurement_Handler(handle);
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r_handler */
static void exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler(IndM* handle)
{
	/* Default exit sequence for region r_handler */
	/* Handle exit of all possible states (of indM.R_Handler.s_Time_Gain_Set_Handler.r_handler) at position 1... */
	switch(handle->stateConfVector[ 1 ])
	{
		case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting :
		{
			exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(handle);
			break;
		}
		case IndM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time :
		{
			exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time(handle);
			break;
		}
		default: break;
	}
}

/* The reactions of state null. */
static void react_R_Main_s_Rl_Measurement_R_Res_Med__choice_0(IndM* handle)
{
	/* The reactions of state null. */
	if (check_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr1_tr1(handle) == bool_true)
	{ 
		effect_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr1(handle);
	}  else
	{
		effect_R_Main_s_Rl_Measurement_R_Res_Med__choice_0_tr0(handle);
	}
}

/* The reactions of state null. */
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0(IndM* handle)
{
	/* The reactions of state null. */
	if (check_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr0_tr0(handle) == bool_true)
	{ 
		effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr0(handle);
	}  else
	{
		effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0_tr1(handle);
	}
}

/* The reactions of state null. */
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1(IndM* handle)
{
	/* The reactions of state null. */
	if (check_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr0_tr0(handle) == bool_true)
	{ 
		effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr0(handle);
	}  else
	{
		effect_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_1_tr1(handle);
	}
}

/* Default react sequence for initial entry  */
static void react_R_Main__entry_Default(IndM* handle)
{
	/* Default react sequence for initial entry  */
	enseq_R_Main_s_Port_Configuration_default(handle);
}

/* Default react sequence for initial entry Default */
static void react_R_Main_s_Rl_Measurement_R_Res_Med_Default(IndM* handle)
{
	/* Default react sequence for initial entry Default */
	enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization_default(handle);
}

/* Default react sequence for initial entry Time_Start */
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Time_Start(IndM* handle)
{
	/* Default react sequence for initial entry Time_Start */
	enseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_default(handle);
}

/* Default react sequence for initial entry  */
static void react_R_Main_s_Ind_Measurement_R_Main_Measurement__entry_Default(IndM* handle)
{
	/* Default react sequence for initial entry  */
	enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User_default(handle);
}

/* Default react sequence for initial entry  */
static void react_R_Handler__entry_Default(IndM* handle)
{
	/* Default react sequence for initial entry  */
	enseq_R_Handler_s_Null_Handler_default(handle);
}

/* Default react sequence for initial entry  */
static void react_R_Handler_s_Time_Gain_Set_Handler_r_handler__entry_Default(IndM* handle)
{
	/* Default react sequence for initial entry  */
	enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_default(handle);
}

/* The reactions of exit Close. */
static void react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Close(IndM* handle)
{
	/* The reactions of exit Close. */
	effect_R_Main_s_Time_Gain_Setting_tr0(handle);
}


static sc_boolean react(IndM* handle)
{
	/* State machine reactions. */
	SC_UNUSED(handle);
	return bool_false;
}

static sc_boolean R_Main_s_Port_Configuration_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Port_Configuration. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((react(handle)) == (bool_false))
		{ 
			if ((handle->iface.Conf_Ready) == (bool_true))
			{ 
				exseq_R_Main_s_Port_Configuration(handle);
				handle->iface.f_res_configured = bool_false;
				enseq_R_Main_s_Rl_Measurement_Default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Rl_Measurement_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Rl_Measurement. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((react(handle)) == (bool_false))
		{ 
			did_transition = bool_false;
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Wait. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Rl_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			if (((handle->current.internal.New_data_raised) == bool_true) && (((handle->iface.f_res_configured) == (bool_true)) == bool_true))
			{ 
				exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait(handle);
				enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Initilization. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Rl_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			if ((handle->iface.f_res_configured) == (bool_true))
			{ 
				exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Initilization(handle);
				enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Control_and_RCalculation. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Rl_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Control_and_RCalculation(handle);
			react_R_Main_s_Rl_Measurement_R_Res_Med__choice_0(handle);
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Rl_Measurement_R_Res_Med_s_Close_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Close. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Rl_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			if (handle->current.iface.Stop_raised == bool_true)
			{ 
				exseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Close(handle);
				enseq_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait_default(handle);
			}  else
			{
				if ((handle->iface.Conf_Ready) == (bool_true))
				{ 
					exseq_R_Main_s_Rl_Measurement(handle);
					indM_set_Time_Reference(handle, handle->iface.n_i);
					enseq_R_Main_s_Time_Gain_Setting_Time_Start(handle);
				}  else
				{
					did_transition = bool_false;
				}
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Time_Gain_Setting_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Time_Gain_Setting. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((react(handle)) == (bool_false))
		{ 
			did_transition = bool_false;
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Setting. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Time_Gain_Setting_react(handle, try_transition)) == (bool_false))
		{ 
			if (handle->current.timeEvents.indM_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting_time_event_0_raised == bool_true)
			{ 
				exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Setting(handle);
				react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set__choice_0(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Safe_Close. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Time_Gain_Setting_react(handle, try_transition)) == (bool_false))
		{ 
			if ((handle->iface.Conf_Ready) == (bool_true))
			{ 
				exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Safe_Close(handle);
				react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Close(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Normal_Close. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Time_Gain_Setting_react(handle, try_transition)) == (bool_false))
		{ 
			if ((handle->iface.Conf_Ready) == (bool_true))
			{ 
				exseq_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_s_Normal_Close(handle);
				react_R_Main_s_Time_Gain_Setting_R_Time_Gain_set_Close(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Ind_Measurement_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Ind_Measurement. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((react(handle)) == (bool_false))
		{ 
			if (handle->current.iface.Stop_raised == bool_true)
			{ 
				exseq_R_Main_s_Ind_Measurement(handle);
				enseq_R_Main_s_Port_Configuration_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Wait_User. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Ind_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			if (handle->current.iface.Play_raised == bool_true)
			{ 
				exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_User(handle);
				enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} if ((did_transition) == (bool_false))
	{ 
		indM_uART_routine(handle, handle->iface.sp_bf_Y, handle->iface.sp_bf_i_Y);
	} return did_transition;
}

static sc_boolean R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Wait_New_data. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Ind_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			if (handle->current.internal.New_data_raised == bool_true)
			{ 
				exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data(handle);
				enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} if ((did_transition) == (bool_false))
	{ 
		indM_uART_routine(handle, handle->iface.sp_bf_Y, handle->iface.sp_bf_i_Y);
	} return did_transition;
}

static sc_boolean R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Data_Processing. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Main_s_Ind_Measurement_react(handle, try_transition)) == (bool_false))
		{ 
			if ((handle->iface.Full_buffer) == (bool_true))
			{ 
				exseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Data_Processing(handle);
				enseq_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Handler_s_Null_Handler_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Null_Handler. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if (indM_is_state_active(handle, IndM_R_Main_s_Rl_Measurement_R_Res_Med_s_Wait) == bool_true)
		{ 
			exseq_R_Handler_s_Null_Handler(handle);
			indM_get_Data(handle);
			enseq_R_Handler_s_Rl_Measurement_Handler_default(handle);
		}  else
		{
			did_transition = bool_false;
		}
	} return did_transition;
}

static sc_boolean R_Handler_s_Time_Gain_Set_Handler_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Time_Gain_Set_Handler. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if (handle->current.iface.Stop_raised == bool_true)
		{ 
			exseq_R_Handler_s_Time_Gain_Set_Handler(handle);
			indM_handler_Disable(handle);
			enseq_R_Handler_s_Null_Handler_default(handle);
		}  else
		{
			if (indM_is_state_active(handle, IndM_R_Main_s_Ind_Measurement_R_Main_Measurement_s_Wait_New_data) == bool_true)
			{ 
				exseq_R_Handler_s_Time_Gain_Set_Handler(handle);
				indM_get_Data_Array(handle);
				enseq_R_Handler_s_Ind_Measurement_Handler_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		}
	} return did_transition;
}

static sc_boolean R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_waiting. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Handler_s_Time_Gain_Set_Handler_react(handle, try_transition)) == (bool_false))
		{ 
			if (handle->current.timeEvents.indM_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting_time_event_0_raised == bool_true)
			{ 
				exseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_waiting(handle);
				enseq_R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		} 
	} return did_transition;
}

static sc_boolean R_Handler_s_Time_Gain_Set_Handler_r_handler_s_end_time_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_end_time. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if ((R_Handler_s_Time_Gain_Set_Handler_react(handle, try_transition)) == (bool_false))
		{ 
			did_transition = bool_false;
		} 
	} return did_transition;
}

static sc_boolean R_Handler_s_Rl_Measurement_Handler_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Rl_Measurement_Handler. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if (handle->current.timeEvents.indM_R_Handler_s_Rl_Measurement_Handler_time_event_0_raised == bool_true)
		{ 
			exseq_R_Handler_s_Rl_Measurement_Handler(handle);
			indM_get_Data(handle);
			enseq_R_Handler_s_Rl_Measurement_Handler_default(handle);
		}  else
		{
			if (indM_is_state_active(handle, IndM_R_Main_s_Time_Gain_Setting) == bool_true)
			{ 
				exseq_R_Handler_s_Rl_Measurement_Handler(handle);
				enseq_R_Handler_s_Time_Gain_Set_Handler_default(handle);
			}  else
			{
				if (handle->current.iface.Stop_raised == bool_true)
				{ 
					exseq_R_Handler_s_Rl_Measurement_Handler(handle);
					indM_handler_Disable(handle);
					enseq_R_Handler_s_Null_Handler_default(handle);
				}  else
				{
					did_transition = bool_false;
				}
			}
		}
	} return did_transition;
}

static sc_boolean R_Handler_s_Ind_Measurement_Handler_react(IndM* handle, const sc_boolean try_transition)
{
	/* The reactions of state s_Ind_Measurement_Handler. */
 			sc_boolean did_transition = try_transition;
	if (try_transition == bool_true)
	{ 
		if (handle->current.timeEvents.indM_R_Handler_s_Ind_Measurement_Handler_time_event_0_raised == bool_true)
		{ 
			exseq_R_Handler_s_Ind_Measurement_Handler(handle);
			indM_get_Data_Array(handle);
			enseq_R_Handler_s_Ind_Measurement_Handler_default(handle);
		}  else
		{
			if (handle->current.iface.Stop_raised == bool_true)
			{ 
				exseq_R_Handler_s_Ind_Measurement_Handler(handle);
				indM_handler_Disable(handle);
				enseq_R_Handler_s_Null_Handler_default(handle);
			}  else
			{
				did_transition = bool_false;
			}
		}
	} return did_transition;
}




